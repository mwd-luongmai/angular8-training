{"version":3,"sources":["./src/app/features/authentication/login/login.component.html","./src/app/features/authentication/authentication-routing.module.ts","./src/app/features/authentication/authentication.module.ts","./src/app/features/authentication/login/login.component.ts","./src/app/shared/validation/field-spec.ts"],"names":[],"mappings":"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","file":"features-authentication-authentication-module-es2015.js","sourcesContent":["export default \"<div class=\\\"flex-comp-container\\\">\\n  <mat-card>\\n    <mat-card-title>Login</mat-card-title>\\n    <mat-card-content>\\n      <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n        <form-input\\n          formControlName=\\\"username\\\"\\n          [errors]=\\\"f.username.errors\\\"\\n          [errorVisible]=\\\"submitted\\\"\\n          [placeholder]=\\\"'Username or Email'\\\"\\n          [icon]=\\\"'email'\\\"\\n        ></form-input>\\n\\n        <form-input\\n          formControlName=\\\"password\\\"\\n          [type]=\\\"'password'\\\"\\n          [errors]=\\\"f.password.errors\\\"\\n          [errorVisible]=\\\"submitted\\\"\\n          [placeholder]=\\\"'Password'\\\"\\n          [icon]=\\\"'lock'\\\"\\n        ></form-input>\\n\\n        <button mat-raised-button [disabled]=\\\"loading\\\" color=\\\"primary\\\">\\n          <mat-icon><i class=\\\"material-icons md-dark\\\">done</i></mat-icon>\\n          Login\\n        </button>\\n        <a mat-button routerLink=\\\"/users/register\\\" class=\\\"btn btn-link\\\">\\n          <mat-icon><i class=\\\"material-icons md-dark\\\">person_add</i></mat-icon>\\n          Register\\n        </a>\\n        <a mat-button routerLink=\\\"/users/forgot-password\\\" class=\\\"btn btn-link\\\">\\n          <mat-icon\\n            ><i class=\\\"material-icons md-dark\\\">contact_support</i></mat-icon\\n          >\\n          Forgot Password\\n        </a>\\n      </form>\\n    </mat-card-content>\\n  </mat-card>\\n  <app-loading [visible]=\\\"loading\\\"></app-loading>\\n</div>\\n\"","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\nimport { LoginComponent } from './login/login.component'\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/auth/login',\n    pathMatch: 'full',\n  },\n  {\n    path: '',\n    children: [{ path: 'login', component: LoginComponent }],\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthenticationRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'\n\nimport { AuthenticationRoutingModule } from './authentication-routing.module'\nimport { LoginComponent } from './login/login.component'\nimport { SharedModule } from '@app/shared'\nimport { CustomMaterialModule } from '@app/core'\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    AuthenticationRoutingModule,\n    ReactiveFormsModule,\n    SharedModule,\n    CustomMaterialModule,\n    FormsModule,\n  ],\n})\nexport class AuthenticationModule {}\n","import { Component, OnInit } from '@angular/core'\nimport { FormBuilder, FormGroup } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { first } from 'rxjs/operators'\n\nimport { AlertService, AuthenticationService } from '@core/services'\nimport { FieldSpecs } from '@app/shared/validation/field-spec'\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup\n  loading = false\n  submitted = false\n  returnUrl: string\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private alertService: AlertService\n  ) {\n    // redirect to home if already logged in\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/'])\n    }\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', [FieldSpecs.fieldRequiredValidator('usernameRequired')]],\n      password: ['', [FieldSpecs.fieldRequiredValidator('passwordRequired')]],\n    })\n\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/'\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls\n  }\n\n  onSubmit() {\n    this.submitted = true\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return\n    }\n\n    this.loading = true\n    this.authenticationService\n      .login(this.f.username.value, this.f.password.value)\n      .pipe(first())\n      .subscribe(\n        () => {\n          this.router.navigate([this.returnUrl])\n        },\n        error => {\n          this.alertService.error(error)\n          this.loading = false\n        }\n      )\n  }\n}\n","import { ValidatorFn, AbstractControl } from '@angular/forms'\n\nfunction finalizeValidationResult(result: {\n  [key: string]: boolean\n}): { [key: string]: boolean } | null {\n  const newResult: { [key: string]: boolean } = {}\n  Object.keys(result).forEach(property => {\n    if (result[property]) {\n      newResult[property] = true\n    }\n  })\n  if (newResult) {\n    return newResult\n  }\n  return null\n}\n\nconst USER_NAME_MIN_LENGTH = 6\nconst USER_NAME_PATTERN = new RegExp('^[a-zA-Z0-9]+$')\nconst NAME_MAX_LENGTH = 50\nconst COMPANY_MAX_LENGTH = 50\nconst EMAIL_PATTERN = new RegExp('^[^@]+@[^@]+$')\nconst PASSWORD_MIN_LENGTH = 8\nconst PASSWORD_NONALPHABETIC_PATTERN = new RegExp('[^a-zA-Z]+')\nconst PASSWORD_ALPHABETIC_PATTERN = new RegExp('[a-zA-Z]{4,}')\nconst PROFILE_LOCATION_MAX_LENGTH = 100\nconst BIO_MAX_LENGTH = 255\n\nexport class FieldSpecs {\n  static usernameValidator(\n    control: AbstractControl\n  ): { [key: string]: boolean } | null {\n    const username = control.value.trim()\n\n    const usernameRequired = !username\n    const usernameMinLength = username.length < USER_NAME_MIN_LENGTH\n    const usernamePattern = !USER_NAME_PATTERN.test(username)\n\n    if (usernameRequired) {\n      return { usernameRequired }\n    }\n    return finalizeValidationResult({\n      usernameRequired,\n      usernameMinLength,\n      usernamePattern,\n    })\n  }\n\n  static fieldRequiredValidator(\n    validatorName: string,\n    trimValue = true\n  ): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      let value = control.value\n      if (trimValue) {\n        value = value.trim()\n      }\n      const result: { [key: string]: any } = {}\n      result[validatorName] = !value\n      return finalizeValidationResult(result)\n    }\n  }\n\n  static nameValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const name = control.value.trim()\n\n    const nameRequired = !name\n    const nameMaxLength = name.length > NAME_MAX_LENGTH\n\n    if (nameRequired) {\n      return { nameRequired }\n    }\n    return finalizeValidationResult({ nameRequired, nameMaxLength })\n  }\n\n  static companyValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const company = control.value.trim()\n\n    const companyRequired = !company\n    const companyMaxLength = company.length > COMPANY_MAX_LENGTH\n\n    if (companyRequired) {\n      return { companyRequired }\n    }\n    return finalizeValidationResult({ companyRequired, companyMaxLength })\n  }\n\n  static emailValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const email = control.value.trim()\n    const emailRequired = !email\n    const emailPattern = !EMAIL_PATTERN.test(email)\n\n    if (emailRequired) {\n      return { emailRequired }\n    }\n    return finalizeValidationResult({ emailRequired, emailPattern })\n  }\n\n  static passwordValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const password = control.value\n    const passwordRequired = !password\n    const passwordAlphabeticChars = !PASSWORD_ALPHABETIC_PATTERN.test(password)\n    const passwordNonAlphabetucChars = !PASSWORD_NONALPHABETIC_PATTERN.test(\n      password\n    )\n    const passwordMinLength = password.length < PASSWORD_MIN_LENGTH\n\n    if (passwordRequired) {\n      return { passwordRequired }\n    }\n    return finalizeValidationResult({\n      passwordRequired,\n      passwordAlphabeticChars,\n      passwordNonAlphabetucChars,\n      passwordMinLength,\n    })\n  }\n\n  static simplePasswordValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const password = control.value\n    const passwordRequired = !password\n    const passwordMinLength = password.length < PASSWORD_MIN_LENGTH\n\n    if (passwordRequired) {\n      return { passwordRequired }\n    }\n    return finalizeValidationResult({ passwordRequired, passwordMinLength })\n  }\n\n  static profileLocationValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const location = control.value.trim()\n\n    const profileLocationRequired = !location\n    const profileLocationMaxLength =\n      location.length > PROFILE_LOCATION_MAX_LENGTH\n\n    if (profileLocationRequired) {\n      return { profileLocationRequired }\n    }\n    return finalizeValidationResult({\n      profileLocationRequired,\n      profileLocationMaxLength,\n    })\n  }\n\n  static profileBioValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const bio = control.value.trim()\n\n    const profileBioRequired = !bio\n    const profileBioMaxLength = bio.length > BIO_MAX_LENGTH\n\n    if (profileBioRequired) {\n      return { profileBioRequired }\n    }\n    return finalizeValidationResult({ profileBioRequired, profileBioMaxLength })\n  }\n}\n"],"sourceRoot":"webpack:///"}