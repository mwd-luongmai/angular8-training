{"version":3,"sources":["./src/app/shared/validation/field-spec.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms'\n\nfunction finalizeValidationResult(result: {\n  [key: string]: boolean\n}): { [key: string]: boolean } | null {\n  const newResult: { [key: string]: boolean } = {}\n  Object.keys(result).forEach(property => {\n    if (result[property]) {\n      newResult[property] = true\n    }\n  })\n  if (newResult) {\n    return newResult\n  }\n  return null\n}\n\nconst USER_NAME_MIN_LENGTH = 6\nconst USER_NAME_PATTERN = new RegExp(/^[a-zA-Z0-9]+$/)\nconst NAME_MAX_LENGTH = 50\nconst COMPANY_MAX_LENGTH = 50\nconst EMAIL_PATTERN = new RegExp(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/)\nconst PASSWORD_MIN_LENGTH = 8\nconst PASSWORD_NONALPHABETIC_PATTERN = new RegExp(/[^a-zA-Z]+/)\nconst PASSWORD_ALPHABETIC_PATTERN = new RegExp(/[a-zA-Z]{4,}/)\nconst PROFILE_LOCATION_MAX_LENGTH = 100\nconst BIO_MAX_LENGTH = 255\n\nexport class FieldSpecs {\n  static usernameValidator(\n    control: AbstractControl\n  ): { [key: string]: boolean } | null {\n    const username = control.value.trim()\n\n    const usernameRequired = !username\n    const usernameMinLength = username.length < USER_NAME_MIN_LENGTH\n    const usernamePattern = !USER_NAME_PATTERN.test(username)\n\n    if (usernameRequired) {\n      return { usernameRequired }\n    }\n    return finalizeValidationResult({\n      usernameRequired,\n      usernameMinLength,\n      usernamePattern,\n    })\n  }\n\n  static fieldRequiredValidator(\n    validatorName: string,\n    trimValue = true\n  ): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      let value = control.value\n      if (trimValue) {\n        value = value.trim()\n      }\n      const result: { [key: string]: any } = {}\n      result[validatorName] = !value\n      return finalizeValidationResult(result)\n    }\n  }\n\n  static fieldMaxLengthValidator(\n    validatorName: string,\n    trimValue = true,\n    maxLength: number\n  ): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      let value = control.value\n      if (trimValue) {\n        value = value.trim()\n      }\n\n      const result: { [key: string]: any } = {}\n      if (value.length > maxLength) {\n        result[validatorName] = true;\n        control.setErrors(result)\n      }\n\n      return finalizeValidationResult(result)\n    }\n  }\n\n\n  static nameValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const name = control.value.trim()\n\n    const nameRequired = !name\n    const nameMaxLength = name.length > NAME_MAX_LENGTH\n\n    if (nameRequired) {\n      return { nameRequired }\n    }\n    return finalizeValidationResult({ nameRequired, nameMaxLength })\n  }\n\n  static companyValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const company = control.value.trim()\n\n    const companyRequired = !company\n    const companyMaxLength = company.length > COMPANY_MAX_LENGTH\n\n    if (companyRequired) {\n      return { companyRequired }\n    }\n    return finalizeValidationResult({ companyRequired, companyMaxLength })\n  }\n\n  static emailValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const email = control.value.trim()\n    const emailRequired = !email\n    const emailPattern = !EMAIL_PATTERN.test(email)\n\n    if (emailRequired) {\n      return { emailRequired }\n    }\n    return finalizeValidationResult({ emailRequired, emailPattern })\n  }\n\n  static passwordValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const password = control.value\n    const passwordRequired = !password\n    const passwordAlphabeticChars = !PASSWORD_ALPHABETIC_PATTERN.test(password)\n    const passwordNonAlphabetucChars = !PASSWORD_NONALPHABETIC_PATTERN.test(\n      password\n    )\n    const passwordMinLength = password.length < PASSWORD_MIN_LENGTH\n\n    if (passwordRequired) {\n      return { passwordRequired }\n    }\n    return finalizeValidationResult({\n      passwordRequired,\n      passwordAlphabeticChars,\n      passwordNonAlphabetucChars,\n      passwordMinLength,\n    })\n  }\n\n  static simplePasswordValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const password = control.value\n    const passwordRequired = !password\n    const passwordMinLength = password.length < PASSWORD_MIN_LENGTH\n\n    if (passwordRequired) {\n      return { passwordRequired }\n    }\n    return finalizeValidationResult({ passwordRequired, passwordMinLength })\n  }\n\n  static profileLocationValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const location = control.value.trim()\n\n    const profileLocationRequired = !location\n    const profileLocationMaxLength =\n      location.length > PROFILE_LOCATION_MAX_LENGTH\n\n    if (profileLocationRequired) {\n      return { profileLocationRequired }\n    }\n    return finalizeValidationResult({\n      profileLocationRequired,\n      profileLocationMaxLength,\n    })\n  }\n\n  static profileBioValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const bio = control.value.trim()\n\n    const profileBioRequired = !bio\n    const profileBioMaxLength = bio.length > BIO_MAX_LENGTH\n\n    if (profileBioRequired) {\n      return { profileBioRequired }\n    }\n    return finalizeValidationResult({ profileBioRequired, profileBioMaxLength })\n  }\n}\n"],"sourceRoot":"webpack:///"}