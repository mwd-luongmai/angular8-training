{"version":3,"sources":["src/app/shared/validation/field-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms'\n\nfunction finalizeValidationResult(result: {\n  [key: string]: boolean\n}): { [key: string]: boolean } | null {\n  const newResult: { [key: string]: boolean } = {}\n  Object.keys(result).forEach(property => {\n    if (result[property]) {\n      newResult[property] = true\n    }\n  })\n  if (newResult) {\n    return newResult\n  }\n  return null\n}\n\nconst USER_NAME_MIN_LENGTH = 6\nconst USER_NAME_PATTERN = new RegExp(/^[a-zA-Z0-9]+$/)\nconst NAME_MAX_LENGTH = 50\nconst COMPANY_MAX_LENGTH = 50\nconst EMAIL_PATTERN = new RegExp(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/)\nconst PASSWORD_MIN_LENGTH = 8\nconst PASSWORD_NONALPHABETIC_PATTERN = new RegExp(/[^a-zA-Z]+/)\nconst PASSWORD_ALPHABETIC_PATTERN = new RegExp(/[a-zA-Z]{4,}/)\nconst PROFILE_LOCATION_MAX_LENGTH = 100\nconst BIO_MAX_LENGTH = 255\n\nexport class FieldSpecs {\n  static usernameValidator(\n    control: AbstractControl\n  ): { [key: string]: boolean } | null {\n    const username = control.value.trim()\n\n    const usernameRequired = !username\n    const usernameMinLength = username.length < USER_NAME_MIN_LENGTH\n    const usernamePattern = !USER_NAME_PATTERN.test(username)\n\n    if (usernameRequired) {\n      return { usernameRequired }\n    }\n    return finalizeValidationResult({\n      usernameRequired,\n      usernameMinLength,\n      usernamePattern,\n    })\n  }\n\n  static fieldRequiredValidator(\n    validatorName: string,\n    trimValue = true\n  ): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      let value = control.value\n      if (trimValue) {\n        value = value.trim()\n      }\n      const result: { [key: string]: any } = {}\n      result[validatorName] = !value\n      return finalizeValidationResult(result)\n    }\n  }\n\n  static fieldMaxLengthValidator(\n    validatorName: string,\n    trimValue = true,\n    maxLength: number\n  ): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      let value = control.value\n      if (trimValue) {\n        value = value.trim()\n      }\n\n      const result: { [key: string]: any } = {}\n      if (value.length > maxLength) {\n        result[validatorName] = true;\n        control.setErrors(result)\n      }\n\n      return finalizeValidationResult(result)\n    }\n  }\n\n\n  static nameValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const name = control.value.trim()\n\n    const nameRequired = !name\n    const nameMaxLength = name.length > NAME_MAX_LENGTH\n\n    if (nameRequired) {\n      return { nameRequired }\n    }\n    return finalizeValidationResult({ nameRequired, nameMaxLength })\n  }\n\n  static companyValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const company = control.value.trim()\n\n    const companyRequired = !company\n    const companyMaxLength = company.length > COMPANY_MAX_LENGTH\n\n    if (companyRequired) {\n      return { companyRequired }\n    }\n    return finalizeValidationResult({ companyRequired, companyMaxLength })\n  }\n\n  static emailValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const email = control.value.trim()\n    const emailRequired = !email\n    const emailPattern = !EMAIL_PATTERN.test(email)\n\n    if (emailRequired) {\n      return { emailRequired }\n    }\n    return finalizeValidationResult({ emailRequired, emailPattern })\n  }\n\n  static passwordValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const password = control.value\n    const passwordRequired = !password\n    const passwordAlphabeticChars = !PASSWORD_ALPHABETIC_PATTERN.test(password)\n    const passwordNonAlphabetucChars = !PASSWORD_NONALPHABETIC_PATTERN.test(\n      password\n    )\n    const passwordMinLength = password.length < PASSWORD_MIN_LENGTH\n\n    if (passwordRequired) {\n      return { passwordRequired }\n    }\n    return finalizeValidationResult({\n      passwordRequired,\n      passwordAlphabeticChars,\n      passwordNonAlphabetucChars,\n      passwordMinLength,\n    })\n  }\n\n  static simplePasswordValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const password = control.value\n    const passwordRequired = !password\n    const passwordMinLength = password.length < PASSWORD_MIN_LENGTH\n\n    if (passwordRequired) {\n      return { passwordRequired }\n    }\n    return finalizeValidationResult({ passwordRequired, passwordMinLength })\n  }\n\n  static profileLocationValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const location = control.value.trim()\n\n    const profileLocationRequired = !location\n    const profileLocationMaxLength =\n      location.length > PROFILE_LOCATION_MAX_LENGTH\n\n    if (profileLocationRequired) {\n      return { profileLocationRequired }\n    }\n    return finalizeValidationResult({\n      profileLocationRequired,\n      profileLocationMaxLength,\n    })\n  }\n\n  static profileBioValidator(\n    control: AbstractControl\n  ): { [key: string]: any } | null {\n    const bio = control.value.trim()\n\n    const profileBioRequired = !bio\n    const profileBioMaxLength = bio.length > BIO_MAX_LENGTH\n\n    if (profileBioRequired) {\n      return { profileBioRequired }\n    }\n    return finalizeValidationResult({ profileBioRequired, profileBioMaxLength })\n  }\n}\n"],"sourceRoot":"webpack:///","file":"common-es5.js"}